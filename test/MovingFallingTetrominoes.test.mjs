import { beforeEach, describe, test } from "vitest";
import { expect } from "chai";
import { Board } from "../src/Board.mjs";
import { Tetromino } from "../src/Tetromino.mjs";

import { OldTetrominoesRotationsRules } from "./OldTetrominoesRotationsRules.mjs";

function fallToBottom(board) {
  for (let i = 0; i < 10; i++) {
    board.tick();
  }
}

function moveToLeftWall(board) {
  for (let i = 0; i < 10; i++) {
    board.moveLeft();
  }
}

function moveToRightWall(board) {
  for (let i = 0; i < 10; i++) {
    board.moveRight();
  }
}

describe("Moving Falling tetrominoes", () => {
  let board;
  beforeEach(() => {
    board = new Board(10, 6);
  });
  test("a falling tetromino can be moved left", () => {
    board.drop(OldTetrominoesRotationsRules.T_SHAPE);
    expect(board.toString()).to.equalShape(
      `....T.....
       ...TTT....
       ..........
       ..........
       ..........
       ..........`,
    );
    board.moveLeft();
    expect(board.toString()).to.equalShape(
      `...T......
       ..TTT.....
       ..........
       ..........
       ..........
       ..........`,
    );
  });

  test("a falling tetromino can be moved right", () => {
    board.drop(OldTetrominoesRotationsRules.T_SHAPE);
    board.moveRight();
    expect(board.toString()).to.equalShape(
      `.....T....
       ....TTT...
       ..........
       ..........
       ..........
       ..........`,
    );
  });

  test("a falling tetromino can be moved down", () => {
    board.drop(OldTetrominoesRotationsRules.T_SHAPE);
    board.moveDown();
    expect(board.toString()).to.equalShape(
      `..........
       ....T.....
       ...TTT....
       ..........
       ..........
       ..........`,
    );
  });

  describe("It cannot be moved beyond the board", () => {
    test("it cannot be moved left beyond the board", () => {
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveLeft();
      board.moveLeft();
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `.T........
        TTT.......
        ..........
        ..........
        ..........
        ..........`,
      );
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `.T........
        TTT.......
        ..........
        ..........
        ..........
        ..........`,
      );
    });

    test("it cannot be moved right beyond the board", () => {
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveRight();
      board.moveRight();
      board.moveRight();
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `........T.
        .......TTT
        ..........
        ..........
        ..........
        ..........`,
      );
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `........T.
        .......TTT
        ..........
        ..........
        ..........
        ..........`,
      );
    });

    test("it cannot be moved down beyond the board (will stop falling)", () => {
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveDown();
      board.moveDown();
      board.moveDown();
      board.moveDown();
      expect(
        board.toString(),
        "the piece arrived at the floor",
      ).to.equalShape(
        `..........
        ..........
        ..........
        ..........
        ....T.....
        ...TTT....`,
      );
      expect(
        board.hasFalling(),
        "the player should still be able to move the block",
      ).to.be.true;
      board.moveDown();
      expect(board.toString(), "the piece is on the floor").to.equalShape(
        `..........
        ..........
        ..........
        ..........
        ....T.....
        ...TTT....`,
      );
      expect(board.hasFalling(), "not piece falling").to.be.false;
    });
  });

  describe("It cannot be moved through other blocks", () => {
    test("it cannot be moved left through other blocks", () => {
      board.loadFromString(
        `..........
         ..........
         OO........
         OO........
         OO........
         OO........`,
      )
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveDown();
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `..........
        ...T......
        OOTTT.....
        OO........
        OO........
        OO........`,
      );
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `..........
        ...T......
        OOTTT.....
        OO........
        OO........
        OO........`,
      );
    });

    test("it cannot be moved right through other blocks", () => {
      board.loadFromString(
        `..........
         ..........
         ........OO
         ........OO
         ........OO
         ........OO`,
      )
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveDown();
      board.moveRight();
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `..........
        ......T...
        .....TTTOO
        ........OO
        ........OO
        ........OO`,
      );
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `..........
        ......T...
        .....TTTOO
        ........OO
        ........OO
        ........OO`,
      );
    });

    test("it cannot be moved down through other blocks (will stop falling)", () => {
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      fallToBottom(board);
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveDown();
      board.moveDown();
      expect(
        board.toString(),
        "the piece arrived at the floor",
      ).to.equalShape(
        `..........
        ..........
        ....T.....
        ...TTT....
        ....T.....
        ...TTT....`,
      );
      expect(
        board.hasFalling(),
        "the player should still be able to move the block",
      ).to.be.true;
      board.moveDown();
      expect(board.toString(), "the piece is on the floor").to.equalShape(
        `..........
        ..........
        ....T.....
        ...TTT....
        ....T.....
        ...TTT....`,
      );
      expect(board.hasFalling(), "not piece falling").to.be.false;
    });
  });
});

describe('Moving a Falling Tetrominoes in Arika Rotation System', () => {
  let board;
  beforeEach(() => {
    board = new Board(10, 6);
  });

  test("a falling tetromino can be moved left", () => {
    board.drop(Tetromino.T_SHAPE);
    expect(board.toString()).to.equalShape(
      `...TTT....
       ....T.....
       ..........
       ..........
       ..........
       ..........`,
    );
    board.moveLeft();
    expect(board.toString()).to.equalShape(
      `..TTT.....
       ...T......
       ..........
       ..........
       ..........
       ..........`,
    );
  });

  test("a falling tetromino can be moved right", () => {
    board.drop(Tetromino.T_SHAPE);
    board.moveRight();
    expect(board.toString()).to.equalShape(
      `....TTT...
       .....T....
       ..........
       ..........
       ..........
       ..........`,
    );
  });

  test("a falling tetromino can be moved down", () => {
    board.drop(Tetromino.T_SHAPE);
    board.moveDown();
    expect(board.toString()).to.equalShape(
      `..........
       ...TTT....
       ....T.....
       ..........
       ..........
       ..........`,
    );
  });

  describe("It cannot be moved beyond the board", () => {
    test("it cannot be moved left beyond the board", () => {
      board.drop(Tetromino.T_SHAPE);
      moveToLeftWall(board);
      expect(board.toString()).to.equalShape(
        `TTT.......
         .T........
         ..........
         ..........
         ..........
         ..........`,
      );
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `TTT.......
         .T........
         ..........
         ..........
         ..........
         ..........`,
      );
    });

    test("it cannot be moved right beyond the board", () => {
      board.drop(Tetromino.T_SHAPE);
      moveToRightWall(board);
      expect(board.toString()).to.equalShape(
        `.......TTT
         ........T.
         ..........
         ..........
         ..........
         ..........`,
      );
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `.......TTT
         ........T.
         ..........
         ..........
         ..........
         ..........`,
      );
    });

    test("it cannot be moved down beyond the board (will stop falling)", () => {
      board.drop(Tetromino.T_SHAPE);
      board.moveDown();
      board.moveDown();
      board.moveDown();
      board.moveDown();
      expect(
        board.toString(),
        "the piece arrived at the floor",
      ).to.equalShape(
        `..........
        ..........
        ..........
        ..........
        ...TTT....
        ....T.....`,
      );
      expect(
        board.hasFalling(),
        "the player should still be able to move the block",
      ).to.be.true;
      board.moveDown();
      expect(board.toString(), "the piece is on the floor").to.equalShape(
        `..........
        ..........
        ..........
        ..........
        ...TTT....
        ....T.....`,
      );
      expect(board.hasFalling(), "not piece falling").to.be.false;
    });
    
  });

  describe("It cannot be moved through other blocks", () => {
    test("it cannot be moved left through other blocks", () => {
      board.loadFromString(
        `..........
         ..........
         XX........
         XX........
         XX........
         XX........`,
      )
      board.drop(Tetromino.T_SHAPE);
      board.moveDown();
      board.moveDown();
      moveToLeftWall(board);
      expect(board.toString()).to.equalShape(
        `..........
         ..........
         XXTTT.....
         XX.T......
         XX........
         XX........`,
      );
      board.moveLeft();
      expect(board.toString()).to.equalShape(
        `..........
         ..........
         XXTTT.....
         XX.T......
         XX........
         XX........`,
      );
    });

    test("it cannot be moved right through other blocks", () => {
      board.loadFromString(
        `..........
         ........XX
         ........XX
         ........XX
         ........XX
         ........XX`,
      )
      board.drop(Tetromino.T_SHAPE);
      board.moveDown();
      moveToRightWall(board);
      expect(board.toString()).to.equalShape(
        `..........
         .....TTTXX
         ......T.XX
         ........XX
         ........XX
         ........XX`,
      );
      board.moveRight();
      expect(board.toString()).to.equalShape(
        `..........
         .....TTTXX
         ......T.XX
         ........XX
         ........XX
         ........XX`,
      );
    });
/*
    test("it cannot be moved down through other blocks (will stop falling)", () => {
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      fallToBottom(board);
      board.drop(OldTetrominoesRotationsRules.T_SHAPE);
      board.moveDown();
      board.moveDown();
      expect(
        board.toString(),
        "the piece arrived at the floor",
      ).to.equalShape(
        `..........
        ..........
        ....T.....
        ...TTT....
        ....T.....
        ...TTT....`,
      );
      expect(
        board.hasFalling(),
        "the player should still be able to move the block",
      ).to.be.true;
      board.moveDown();
      expect(board.toString(), "the piece is on the floor").to.equalShape(
        `..........
        ..........
        ....T.....
        ...TTT....
        ....T.....
        ...TTT....`,
      );
      expect(board.hasFalling(), "not piece falling").to.be.false;
    });
*/
  });
  
});